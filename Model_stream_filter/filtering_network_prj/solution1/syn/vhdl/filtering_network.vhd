-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filtering_network is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_ap_vld : IN STD_LOGIC;
    input_V : IN STD_LOGIC_VECTOR (191 downto 0);
    layer8_out_0_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_0_V_ap_vld : OUT STD_LOGIC;
    layer8_out_1_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_1_V_ap_vld : OUT STD_LOGIC;
    layer8_out_2_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_2_V_ap_vld : OUT STD_LOGIC;
    layer8_out_3_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_3_V_ap_vld : OUT STD_LOGIC;
    layer8_out_4_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_4_V_ap_vld : OUT STD_LOGIC;
    layer8_out_5_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_5_V_ap_vld : OUT STD_LOGIC;
    layer8_out_6_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_6_V_ap_vld : OUT STD_LOGIC;
    layer8_out_7_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_7_V_ap_vld : OUT STD_LOGIC;
    layer8_out_8_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_8_V_ap_vld : OUT STD_LOGIC;
    layer8_out_9_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_9_V_ap_vld : OUT STD_LOGIC;
    layer8_out_10_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_10_V_ap_vld : OUT STD_LOGIC;
    layer8_out_11_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_11_V_ap_vld : OUT STD_LOGIC;
    layer8_out_12_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_12_V_ap_vld : OUT STD_LOGIC;
    layer8_out_13_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_13_V_ap_vld : OUT STD_LOGIC;
    layer8_out_14_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_14_V_ap_vld : OUT STD_LOGIC;
    layer8_out_15_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer8_out_15_V_ap_vld : OUT STD_LOGIC;
    const_size_in_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_in_1_ap_vld : OUT STD_LOGIC;
    const_size_out_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_out_1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of filtering_network is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "filtering_network,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku115-flvb2104-2-i,HLS_INPUT_CLOCK=12.500000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=10.273750,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=8,HLS_SYN_DSP=130,HLS_SYN_FF=1177,HLS_SYN_LUT=25297,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv192_lc_1 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal input_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal input_V_preg : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal input_V_in_sig : STD_LOGIC_VECTOR (191 downto 0);
    signal input_V_ap_vld_preg : STD_LOGIC := '0';
    signal input_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer2_out_0_V_reg_751 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer2_out_1_V_reg_756 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer2_out_2_V_reg_761 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer2_out_3_V_reg_766 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer2_out_4_V_reg_771 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer2_out_5_V_reg_776 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer2_out_6_V_reg_781 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer2_out_7_V_reg_786 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer2_out_8_V_reg_791 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer2_out_9_V_reg_796 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer2_out_10_V_reg_801 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer2_out_11_V_reg_806 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer2_out_12_V_reg_811 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer2_out_13_V_reg_816 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer2_out_14_V_reg_821 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer2_out_15_V_reg_826 : STD_LOGIC_VECTOR (19 downto 0);
    signal layer3_out_0_V_reg_831 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_1_V_reg_836 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_2_V_reg_841 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_3_V_reg_846 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_4_V_reg_851 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_5_V_reg_856 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_6_V_reg_861 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_7_V_reg_866 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_8_V_reg_871 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_9_V_reg_876 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_10_V_reg_881 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_11_V_reg_886 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_12_V_reg_891 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_13_V_reg_896 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_14_V_reg_901 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_15_V_reg_906 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_16_V_reg_911 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_17_V_reg_916 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_18_V_reg_921 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_19_V_reg_926 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_20_V_reg_931 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_21_V_reg_936 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_22_V_reg_941 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_23_V_reg_946 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_24_V_reg_951 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_0_V_reg_956 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_1_V_reg_961 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_2_V_reg_966 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_3_V_reg_971 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_4_V_reg_976 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_5_V_reg_981 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_6_V_reg_986 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_7_V_reg_991 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_8_V_reg_996 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_9_V_reg_1001 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_10_V_reg_1006 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_11_V_reg_1011 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_12_V_reg_1016 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_13_V_reg_1021 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_14_V_reg_1026 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer6_out_15_V_reg_1031 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_ready : STD_LOGIC;
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_ready : STD_LOGIC;
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_16 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_17 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_18 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_19 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_20 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_21 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_22 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_23 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_24 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_sigmoid_fu_261_ap_start : STD_LOGIC;
    signal grp_sigmoid_fu_261_ap_done : STD_LOGIC;
    signal grp_sigmoid_fu_261_ap_idle : STD_LOGIC;
    signal grp_sigmoid_fu_261_ap_ready : STD_LOGIC;
    signal grp_sigmoid_fu_261_ap_ce : STD_LOGIC;
    signal grp_sigmoid_fu_261_ap_return_0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sigmoid_fu_261_ap_return_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sigmoid_fu_261_ap_return_2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sigmoid_fu_261_ap_return_3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sigmoid_fu_261_ap_return_4 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sigmoid_fu_261_ap_return_5 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sigmoid_fu_261_ap_return_6 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sigmoid_fu_261_ap_return_7 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sigmoid_fu_261_ap_return_8 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sigmoid_fu_261_ap_return_9 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sigmoid_fu_261_ap_return_10 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sigmoid_fu_261_ap_return_11 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sigmoid_fu_261_ap_return_12 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sigmoid_fu_261_ap_return_13 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sigmoid_fu_261_ap_return_14 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sigmoid_fu_261_ap_return_15 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1_pp0_stage0_iter0_ignore_call112 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call112 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call112 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call112 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call112 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp93 : BOOLEAN;
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_ready : STD_LOGIC;
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_0 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_1 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_2 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_3 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_4 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_5 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_6 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_7 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_8 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_9 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_10 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_11 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_12 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_13 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_14 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_15 : STD_LOGIC_VECTOR (19 downto 0);
    signal call_ret2_relu_fu_289_ap_ready : STD_LOGIC;
    signal call_ret2_relu_fu_289_ap_return_0 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_2 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_3 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_4 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_5 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_6 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_7 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_8 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_9 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_10 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_11 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_12 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_13 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_14 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_15 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_16 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_17 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_18 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_19 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_20 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_21 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_22 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_23 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_fu_289_ap_return_24 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_sigmoid_fu_261_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component dense_latency_0_0_0_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_16_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_17_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_18_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_19_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_20_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_21_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_22_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_23_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_24_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dense_latency_0_0_0_1 IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component sigmoid IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component normalize_0_0_0_0_0_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (191 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component relu IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_16_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_17_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_18_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_19_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_20_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_21_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_22_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_23_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_24_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    call_ret3_dense_latency_0_0_0_s_fu_212 : component dense_latency_0_0_0_s
    port map (
        ap_ready => call_ret3_dense_latency_0_0_0_s_fu_212_ap_ready,
        data_0_V_read => call_ret2_relu_fu_289_ap_return_0,
        data_1_V_read => call_ret2_relu_fu_289_ap_return_1,
        data_2_V_read => call_ret2_relu_fu_289_ap_return_2,
        data_3_V_read => call_ret2_relu_fu_289_ap_return_3,
        data_4_V_read => call_ret2_relu_fu_289_ap_return_4,
        data_5_V_read => call_ret2_relu_fu_289_ap_return_5,
        data_6_V_read => call_ret2_relu_fu_289_ap_return_6,
        data_7_V_read => call_ret2_relu_fu_289_ap_return_7,
        data_8_V_read => call_ret2_relu_fu_289_ap_return_8,
        data_9_V_read => call_ret2_relu_fu_289_ap_return_9,
        data_10_V_read => call_ret2_relu_fu_289_ap_return_10,
        data_11_V_read => call_ret2_relu_fu_289_ap_return_11,
        data_12_V_read => call_ret2_relu_fu_289_ap_return_12,
        data_13_V_read => call_ret2_relu_fu_289_ap_return_13,
        data_14_V_read => call_ret2_relu_fu_289_ap_return_14,
        data_15_V_read => call_ret2_relu_fu_289_ap_return_15,
        data_16_V_read => call_ret2_relu_fu_289_ap_return_16,
        data_17_V_read => call_ret2_relu_fu_289_ap_return_17,
        data_18_V_read => call_ret2_relu_fu_289_ap_return_18,
        data_19_V_read => call_ret2_relu_fu_289_ap_return_19,
        data_20_V_read => call_ret2_relu_fu_289_ap_return_20,
        data_21_V_read => call_ret2_relu_fu_289_ap_return_21,
        data_22_V_read => call_ret2_relu_fu_289_ap_return_22,
        data_23_V_read => call_ret2_relu_fu_289_ap_return_23,
        data_24_V_read => call_ret2_relu_fu_289_ap_return_24,
        ap_return_0 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_0,
        ap_return_1 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_1,
        ap_return_2 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_2,
        ap_return_3 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_3,
        ap_return_4 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_4,
        ap_return_5 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_5,
        ap_return_6 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_6,
        ap_return_7 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_7,
        ap_return_8 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_8,
        ap_return_9 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_9,
        ap_return_10 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_10,
        ap_return_11 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_11,
        ap_return_12 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_12,
        ap_return_13 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_13,
        ap_return_14 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_14,
        ap_return_15 => call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_15);

    call_ret1_dense_latency_0_0_0_1_fu_241 : component dense_latency_0_0_0_1
    port map (
        ap_ready => call_ret1_dense_latency_0_0_0_1_fu_241_ap_ready,
        data_0_V_read => layer2_out_0_V_reg_751,
        data_1_V_read => layer2_out_1_V_reg_756,
        data_2_V_read => layer2_out_2_V_reg_761,
        data_3_V_read => layer2_out_3_V_reg_766,
        data_4_V_read => layer2_out_4_V_reg_771,
        data_5_V_read => layer2_out_5_V_reg_776,
        data_6_V_read => layer2_out_6_V_reg_781,
        data_7_V_read => layer2_out_7_V_reg_786,
        data_8_V_read => layer2_out_8_V_reg_791,
        data_9_V_read => layer2_out_9_V_reg_796,
        data_10_V_read => layer2_out_10_V_reg_801,
        data_11_V_read => layer2_out_11_V_reg_806,
        data_12_V_read => layer2_out_12_V_reg_811,
        data_13_V_read => layer2_out_13_V_reg_816,
        data_14_V_read => layer2_out_14_V_reg_821,
        data_15_V_read => layer2_out_15_V_reg_826,
        ap_return_0 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_0,
        ap_return_1 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_1,
        ap_return_2 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_2,
        ap_return_3 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_3,
        ap_return_4 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_4,
        ap_return_5 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_5,
        ap_return_6 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_6,
        ap_return_7 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_7,
        ap_return_8 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_8,
        ap_return_9 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_9,
        ap_return_10 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_10,
        ap_return_11 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_11,
        ap_return_12 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_12,
        ap_return_13 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_13,
        ap_return_14 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_14,
        ap_return_15 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_15,
        ap_return_16 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_16,
        ap_return_17 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_17,
        ap_return_18 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_18,
        ap_return_19 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_19,
        ap_return_20 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_20,
        ap_return_21 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_21,
        ap_return_22 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_22,
        ap_return_23 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_23,
        ap_return_24 => call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_24);

    grp_sigmoid_fu_261 : component sigmoid
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sigmoid_fu_261_ap_start,
        ap_done => grp_sigmoid_fu_261_ap_done,
        ap_idle => grp_sigmoid_fu_261_ap_idle,
        ap_ready => grp_sigmoid_fu_261_ap_ready,
        ap_ce => grp_sigmoid_fu_261_ap_ce,
        data_0_V_read => layer6_out_0_V_reg_956,
        data_1_V_read => layer6_out_1_V_reg_961,
        data_2_V_read => layer6_out_2_V_reg_966,
        data_3_V_read => layer6_out_3_V_reg_971,
        data_4_V_read => layer6_out_4_V_reg_976,
        data_5_V_read => layer6_out_5_V_reg_981,
        data_6_V_read => layer6_out_6_V_reg_986,
        data_7_V_read => layer6_out_7_V_reg_991,
        data_8_V_read => layer6_out_8_V_reg_996,
        data_9_V_read => layer6_out_9_V_reg_1001,
        data_10_V_read => layer6_out_10_V_reg_1006,
        data_11_V_read => layer6_out_11_V_reg_1011,
        data_12_V_read => layer6_out_12_V_reg_1016,
        data_13_V_read => layer6_out_13_V_reg_1021,
        data_14_V_read => layer6_out_14_V_reg_1026,
        data_15_V_read => layer6_out_15_V_reg_1031,
        ap_return_0 => grp_sigmoid_fu_261_ap_return_0,
        ap_return_1 => grp_sigmoid_fu_261_ap_return_1,
        ap_return_2 => grp_sigmoid_fu_261_ap_return_2,
        ap_return_3 => grp_sigmoid_fu_261_ap_return_3,
        ap_return_4 => grp_sigmoid_fu_261_ap_return_4,
        ap_return_5 => grp_sigmoid_fu_261_ap_return_5,
        ap_return_6 => grp_sigmoid_fu_261_ap_return_6,
        ap_return_7 => grp_sigmoid_fu_261_ap_return_7,
        ap_return_8 => grp_sigmoid_fu_261_ap_return_8,
        ap_return_9 => grp_sigmoid_fu_261_ap_return_9,
        ap_return_10 => grp_sigmoid_fu_261_ap_return_10,
        ap_return_11 => grp_sigmoid_fu_261_ap_return_11,
        ap_return_12 => grp_sigmoid_fu_261_ap_return_12,
        ap_return_13 => grp_sigmoid_fu_261_ap_return_13,
        ap_return_14 => grp_sigmoid_fu_261_ap_return_14,
        ap_return_15 => grp_sigmoid_fu_261_ap_return_15);

    call_ret_normalize_0_0_0_0_0_s_fu_283 : component normalize_0_0_0_0_0_s
    port map (
        ap_ready => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_ready,
        data_V_read => input_V_in_sig,
        ap_return_0 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_0,
        ap_return_1 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_1,
        ap_return_2 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_2,
        ap_return_3 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_3,
        ap_return_4 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_4,
        ap_return_5 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_5,
        ap_return_6 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_6,
        ap_return_7 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_7,
        ap_return_8 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_8,
        ap_return_9 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_9,
        ap_return_10 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_10,
        ap_return_11 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_11,
        ap_return_12 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_12,
        ap_return_13 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_13,
        ap_return_14 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_14,
        ap_return_15 => call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_15);

    call_ret2_relu_fu_289 : component relu
    port map (
        ap_ready => call_ret2_relu_fu_289_ap_ready,
        data_0_V_read => layer3_out_0_V_reg_831,
        data_1_V_read => layer3_out_1_V_reg_836,
        data_2_V_read => layer3_out_2_V_reg_841,
        data_3_V_read => layer3_out_3_V_reg_846,
        data_4_V_read => layer3_out_4_V_reg_851,
        data_5_V_read => layer3_out_5_V_reg_856,
        data_6_V_read => layer3_out_6_V_reg_861,
        data_7_V_read => layer3_out_7_V_reg_866,
        data_8_V_read => layer3_out_8_V_reg_871,
        data_9_V_read => layer3_out_9_V_reg_876,
        data_10_V_read => layer3_out_10_V_reg_881,
        data_11_V_read => layer3_out_11_V_reg_886,
        data_12_V_read => layer3_out_12_V_reg_891,
        data_13_V_read => layer3_out_13_V_reg_896,
        data_14_V_read => layer3_out_14_V_reg_901,
        data_15_V_read => layer3_out_15_V_reg_906,
        data_16_V_read => layer3_out_16_V_reg_911,
        data_17_V_read => layer3_out_17_V_reg_916,
        data_18_V_read => layer3_out_18_V_reg_921,
        data_19_V_read => layer3_out_19_V_reg_926,
        data_20_V_read => layer3_out_20_V_reg_931,
        data_21_V_read => layer3_out_21_V_reg_936,
        data_22_V_read => layer3_out_22_V_reg_941,
        data_23_V_read => layer3_out_23_V_reg_946,
        data_24_V_read => layer3_out_24_V_reg_951,
        ap_return_0 => call_ret2_relu_fu_289_ap_return_0,
        ap_return_1 => call_ret2_relu_fu_289_ap_return_1,
        ap_return_2 => call_ret2_relu_fu_289_ap_return_2,
        ap_return_3 => call_ret2_relu_fu_289_ap_return_3,
        ap_return_4 => call_ret2_relu_fu_289_ap_return_4,
        ap_return_5 => call_ret2_relu_fu_289_ap_return_5,
        ap_return_6 => call_ret2_relu_fu_289_ap_return_6,
        ap_return_7 => call_ret2_relu_fu_289_ap_return_7,
        ap_return_8 => call_ret2_relu_fu_289_ap_return_8,
        ap_return_9 => call_ret2_relu_fu_289_ap_return_9,
        ap_return_10 => call_ret2_relu_fu_289_ap_return_10,
        ap_return_11 => call_ret2_relu_fu_289_ap_return_11,
        ap_return_12 => call_ret2_relu_fu_289_ap_return_12,
        ap_return_13 => call_ret2_relu_fu_289_ap_return_13,
        ap_return_14 => call_ret2_relu_fu_289_ap_return_14,
        ap_return_15 => call_ret2_relu_fu_289_ap_return_15,
        ap_return_16 => call_ret2_relu_fu_289_ap_return_16,
        ap_return_17 => call_ret2_relu_fu_289_ap_return_17,
        ap_return_18 => call_ret2_relu_fu_289_ap_return_18,
        ap_return_19 => call_ret2_relu_fu_289_ap_return_19,
        ap_return_20 => call_ret2_relu_fu_289_ap_return_20,
        ap_return_21 => call_ret2_relu_fu_289_ap_return_21,
        ap_return_22 => call_ret2_relu_fu_289_ap_return_22,
        ap_return_23 => call_ret2_relu_fu_289_ap_return_23,
        ap_return_24 => call_ret2_relu_fu_289_ap_return_24);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    grp_sigmoid_fu_261_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sigmoid_fu_261_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    grp_sigmoid_fu_261_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sigmoid_fu_261_ap_ready = ap_const_logic_1)) then 
                    grp_sigmoid_fu_261_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    input_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    input_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (input_V_ap_vld = ap_const_logic_1))) then 
                    input_V_ap_vld_preg <= input_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    input_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_preg <= ap_const_lv192_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (input_V_ap_vld = ap_const_logic_1))) then 
                    input_V_preg <= input_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                layer2_out_0_V_reg_751 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_0;
                layer2_out_10_V_reg_801 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_10;
                layer2_out_11_V_reg_806 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_11;
                layer2_out_12_V_reg_811 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_12;
                layer2_out_13_V_reg_816 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_13;
                layer2_out_14_V_reg_821 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_14;
                layer2_out_15_V_reg_826 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_15;
                layer2_out_1_V_reg_756 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_1;
                layer2_out_2_V_reg_761 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_2;
                layer2_out_3_V_reg_766 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_3;
                layer2_out_4_V_reg_771 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_4;
                layer2_out_5_V_reg_776 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_5;
                layer2_out_6_V_reg_781 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_6;
                layer2_out_7_V_reg_786 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_7;
                layer2_out_8_V_reg_791 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_8;
                layer2_out_9_V_reg_796 <= call_ret_normalize_0_0_0_0_0_s_fu_283_ap_return_9;
                layer3_out_0_V_reg_831 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_0;
                layer3_out_10_V_reg_881 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_10;
                layer3_out_11_V_reg_886 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_11;
                layer3_out_12_V_reg_891 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_12;
                layer3_out_13_V_reg_896 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_13;
                layer3_out_14_V_reg_901 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_14;
                layer3_out_15_V_reg_906 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_15;
                layer3_out_16_V_reg_911 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_16;
                layer3_out_17_V_reg_916 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_17;
                layer3_out_18_V_reg_921 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_18;
                layer3_out_19_V_reg_926 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_19;
                layer3_out_1_V_reg_836 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_1;
                layer3_out_20_V_reg_931 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_20;
                layer3_out_21_V_reg_936 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_21;
                layer3_out_22_V_reg_941 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_22;
                layer3_out_23_V_reg_946 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_23;
                layer3_out_24_V_reg_951 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_24;
                layer3_out_2_V_reg_841 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_2;
                layer3_out_3_V_reg_846 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_3;
                layer3_out_4_V_reg_851 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_4;
                layer3_out_5_V_reg_856 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_5;
                layer3_out_6_V_reg_861 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_6;
                layer3_out_7_V_reg_866 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_7;
                layer3_out_8_V_reg_871 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_8;
                layer3_out_9_V_reg_876 <= call_ret1_dense_latency_0_0_0_1_fu_241_ap_return_9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                layer6_out_0_V_reg_956 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_0;
                layer6_out_10_V_reg_1006 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_10;
                layer6_out_11_V_reg_1011 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_11;
                layer6_out_12_V_reg_1016 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_12;
                layer6_out_13_V_reg_1021 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_13;
                layer6_out_14_V_reg_1026 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_14;
                layer6_out_15_V_reg_1031 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_15;
                layer6_out_1_V_reg_961 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_1;
                layer6_out_2_V_reg_966 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_2;
                layer6_out_3_V_reg_971 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_3;
                layer6_out_4_V_reg_976 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_4;
                layer6_out_5_V_reg_981 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_5;
                layer6_out_6_V_reg_986 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_6;
                layer6_out_7_V_reg_991 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_7;
                layer6_out_8_V_reg_996 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_8;
                layer6_out_9_V_reg_1001 <= call_ret3_dense_latency_0_0_0_s_fu_212_ap_return_9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, input_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, input_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp93_assign_proc : process(ap_start, input_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp93 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, input_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, input_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call112_assign_proc : process(ap_start, input_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call112 <= ((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call112 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call112 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call112 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call112 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    const_size_in_1 <= ap_const_lv16_10;

    const_size_in_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            const_size_in_1_ap_vld <= ap_const_logic_1;
        else 
            const_size_in_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    const_size_out_1 <= ap_const_lv16_10;

    const_size_out_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            const_size_out_1_ap_vld <= ap_const_logic_1;
        else 
            const_size_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_sigmoid_fu_261_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp93)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp93) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_sigmoid_fu_261_ap_ce <= ap_const_logic_1;
        else 
            grp_sigmoid_fu_261_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_sigmoid_fu_261_ap_start <= grp_sigmoid_fu_261_ap_start_reg;

    input_V_ap_vld_in_sig_assign_proc : process(input_V_ap_vld, input_V_ap_vld_preg)
    begin
        if ((input_V_ap_vld = ap_const_logic_1)) then 
            input_V_ap_vld_in_sig <= input_V_ap_vld;
        else 
            input_V_ap_vld_in_sig <= input_V_ap_vld_preg;
        end if; 
    end process;


    input_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, input_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_V_blk_n <= input_V_ap_vld;
        else 
            input_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_V_in_sig_assign_proc : process(input_V_ap_vld, input_V, input_V_preg)
    begin
        if ((input_V_ap_vld = ap_const_logic_1)) then 
            input_V_in_sig <= input_V;
        else 
            input_V_in_sig <= input_V_preg;
        end if; 
    end process;

    layer8_out_0_V <= grp_sigmoid_fu_261_ap_return_0;

    layer8_out_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_0_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer8_out_10_V <= grp_sigmoid_fu_261_ap_return_10;

    layer8_out_10_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_10_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_10_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer8_out_11_V <= grp_sigmoid_fu_261_ap_return_11;

    layer8_out_11_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_11_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_11_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer8_out_12_V <= grp_sigmoid_fu_261_ap_return_12;

    layer8_out_12_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_12_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_12_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer8_out_13_V <= grp_sigmoid_fu_261_ap_return_13;

    layer8_out_13_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_13_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_13_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer8_out_14_V <= grp_sigmoid_fu_261_ap_return_14;

    layer8_out_14_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_14_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_14_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer8_out_15_V <= grp_sigmoid_fu_261_ap_return_15;

    layer8_out_15_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_15_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_15_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer8_out_1_V <= grp_sigmoid_fu_261_ap_return_1;

    layer8_out_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_1_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer8_out_2_V <= grp_sigmoid_fu_261_ap_return_2;

    layer8_out_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_2_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer8_out_3_V <= grp_sigmoid_fu_261_ap_return_3;

    layer8_out_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_3_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer8_out_4_V <= grp_sigmoid_fu_261_ap_return_4;

    layer8_out_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_4_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer8_out_5_V <= grp_sigmoid_fu_261_ap_return_5;

    layer8_out_5_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_5_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_5_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer8_out_6_V <= grp_sigmoid_fu_261_ap_return_6;

    layer8_out_6_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_6_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_6_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer8_out_7_V <= grp_sigmoid_fu_261_ap_return_7;

    layer8_out_7_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_7_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_7_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer8_out_8_V <= grp_sigmoid_fu_261_ap_return_8;

    layer8_out_8_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_8_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_8_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer8_out_9_V <= grp_sigmoid_fu_261_ap_return_9;

    layer8_out_9_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer8_out_9_V_ap_vld <= ap_const_logic_1;
        else 
            layer8_out_9_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
