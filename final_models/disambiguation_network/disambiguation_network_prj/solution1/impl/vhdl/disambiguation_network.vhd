-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity disambiguation_network is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_ap_vld : IN STD_LOGIC;
    input_V : IN STD_LOGIC_VECTOR (47 downto 0);
    layer11_out_0_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer11_out_0_V_ap_vld : OUT STD_LOGIC;
    layer11_out_1_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer11_out_1_V_ap_vld : OUT STD_LOGIC;
    layer11_out_2_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer11_out_2_V_ap_vld : OUT STD_LOGIC;
    layer11_out_3_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer11_out_3_V_ap_vld : OUT STD_LOGIC;
    layer11_out_4_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer11_out_4_V_ap_vld : OUT STD_LOGIC;
    layer11_out_5_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer11_out_5_V_ap_vld : OUT STD_LOGIC;
    layer11_out_6_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer11_out_6_V_ap_vld : OUT STD_LOGIC;
    layer11_out_7_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer11_out_7_V_ap_vld : OUT STD_LOGIC;
    layer11_out_8_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer11_out_8_V_ap_vld : OUT STD_LOGIC;
    layer11_out_9_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer11_out_9_V_ap_vld : OUT STD_LOGIC;
    layer11_out_10_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer11_out_10_V_ap_vld : OUT STD_LOGIC;
    layer11_out_11_V : OUT STD_LOGIC_VECTOR (9 downto 0);
    layer11_out_11_V_ap_vld : OUT STD_LOGIC;
    const_size_in_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_in_1_ap_vld : OUT STD_LOGIC;
    const_size_out_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_out_1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of disambiguation_network is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "disambiguation_network,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku115-flvb2104-2-i,HLS_INPUT_CLOCK=12.500000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=10.387625,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=7,HLS_SYN_DSP=12,HLS_SYN_FF=517,HLS_SYN_LUT=21932,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv16_C : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal input_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal input_V_preg : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal input_V_in_sig : STD_LOGIC_VECTOR (47 downto 0);
    signal input_V_ap_vld_preg : STD_LOGIC := '0';
    signal exp_table3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce0 : STD_LOGIC;
    signal exp_table3_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table3_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce1 : STD_LOGIC;
    signal exp_table3_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table3_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce2 : STD_LOGIC;
    signal exp_table3_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table3_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce3 : STD_LOGIC;
    signal exp_table3_q3 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table3_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce4 : STD_LOGIC;
    signal exp_table3_q4 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table3_address5 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce5 : STD_LOGIC;
    signal exp_table3_q5 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table3_address6 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce6 : STD_LOGIC;
    signal exp_table3_q6 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table3_address7 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce7 : STD_LOGIC;
    signal exp_table3_q7 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table3_address8 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce8 : STD_LOGIC;
    signal exp_table3_q8 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table3_address9 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce9 : STD_LOGIC;
    signal exp_table3_q9 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table3_address10 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce10 : STD_LOGIC;
    signal exp_table3_q10 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table3_address11 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table3_ce11 : STD_LOGIC;
    signal exp_table3_q11 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table4_ce0 : STD_LOGIC;
    signal invert_table4_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal input_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer4_out_0_V_reg_1304 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_1_V_reg_1309 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_2_V_reg_1314 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_3_V_reg_1319 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_4_V_reg_1324 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_5_V_reg_1329 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_6_V_reg_1334 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_7_V_reg_1339 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_8_V_reg_1344 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_9_V_reg_1349 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_10_V_reg_1354 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_11_V_reg_1359 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_12_V_reg_1364 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_13_V_reg_1369 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_14_V_reg_1374 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_15_V_reg_1379 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_16_V_reg_1384 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_17_V_reg_1389 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_18_V_reg_1394 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_19_V_reg_1399 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_20_V_reg_1404 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_21_V_reg_1409 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_22_V_reg_1414 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_23_V_reg_1419 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer4_out_24_V_reg_1424 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer7_out_0_V_reg_1429 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer7_out_1_V_reg_1434 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer7_out_2_V_reg_1439 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer7_out_3_V_reg_1444 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer7_out_4_V_reg_1449 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer7_out_5_V_reg_1454 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer7_out_6_V_reg_1459 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer7_out_7_V_reg_1464 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer7_out_8_V_reg_1469 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer7_out_9_V_reg_1474 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer7_out_10_V_reg_1479 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer7_out_11_V_reg_1484 : STD_LOGIC_VECTOR (6 downto 0);
    signal exp_res_0_V_reg_1549 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1554 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1559 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1564 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_V_reg_1569 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_5_V_reg_1574 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_6_V_reg_1579 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_V_reg_1584 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_8_V_reg_1589 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_9_V_reg_1594 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_10_V_reg_1599 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_11_V_reg_1604 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal call_ret3_dense_latency_0_0_0_1_fu_360_ap_ready : STD_LOGIC;
    signal call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_ready : STD_LOGIC;
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_16 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_17 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_18 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_19 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_20 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_21 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_22 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_23 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_dense_latency_0_0_0_s_fu_389_ap_return_24 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_relu_1_fu_395_ap_ready : STD_LOGIC;
    signal call_ret2_relu_1_fu_395_ap_return_0 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_2 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_3 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_4 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_5 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_6 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_7 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_8 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_9 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_10 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_11 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_12 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_13 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_14 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_15 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_16 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_17 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_18 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_19 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_20 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_21 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_22 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_23 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret2_relu_1_fu_395_ap_return_24 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret5_conv_1d_latency_cl_0_fu_424_ap_ready : STD_LOGIC;
    signal call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret4_relu_fu_440_ap_ready : STD_LOGIC;
    signal call_ret4_relu_fu_440_ap_return_0 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret4_relu_fu_440_ap_return_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret4_relu_fu_440_ap_return_2 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret4_relu_fu_440_ap_return_3 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret4_relu_fu_440_ap_return_4 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret4_relu_fu_440_ap_return_5 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret4_relu_fu_440_ap_return_6 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret4_relu_fu_440_ap_return_7 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret4_relu_fu_440_ap_return_8 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret4_relu_fu_440_ap_return_9 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret4_relu_fu_440_ap_return_10 : STD_LOGIC_VECTOR (6 downto 0);
    signal call_ret4_relu_fu_440_ap_return_11 : STD_LOGIC_VECTOR (6 downto 0);
    signal exp_sum_V_reduce_fu_456_ap_ready : STD_LOGIC;
    signal exp_sum_V_reduce_fu_456_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln250_fu_875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_1_fu_890_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_2_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_3_fu_920_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_4_fu_935_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_5_fu_950_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_6_fu_965_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_7_fu_980_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_8_fu_995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_9_fu_1010_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_10_fu_1025_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_11_fu_1040_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln258_fu_1055_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal y_V_fu_865_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_fu_880_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_895_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_910_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_fu_925_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_5_fu_940_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_6_fu_955_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_7_fu_970_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_8_fu_985_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_9_fu_1000_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_10_fu_1015_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_11_fu_1030_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_12_fu_1045_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_fu_1220_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_1_fu_1227_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_2_fu_1234_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_3_fu_1241_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_4_fu_1248_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_5_fu_1255_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_6_fu_1262_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_7_fu_1269_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_8_fu_1276_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_9_fu_1283_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_10_fu_1290_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_11_fu_1297_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_fu_1220_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1116_fu_1060_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_fu_1220_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_1_fu_1227_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_1_fu_1227_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_2_fu_1234_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_2_fu_1234_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_3_fu_1241_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_3_fu_1241_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_4_fu_1248_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_4_fu_1248_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_5_fu_1255_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_5_fu_1255_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_6_fu_1262_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_6_fu_1262_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_7_fu_1269_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_7_fu_1269_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_8_fu_1276_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_8_fu_1276_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_9_fu_1283_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_9_fu_1283_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_10_fu_1290_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_10_fu_1290_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_11_fu_1297_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_11_fu_1297_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1118_10_fu_1290_p10 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_11_fu_1297_p10 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_1_fu_1227_p10 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_2_fu_1234_p10 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_3_fu_1241_p10 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_4_fu_1248_p10 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_5_fu_1255_p10 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_6_fu_1262_p10 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_7_fu_1269_p10 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_8_fu_1276_p10 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_9_fu_1283_p10 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_fu_1220_p10 : STD_LOGIC_VECTOR (20 downto 0);

    component dense_latency_0_0_0_1 IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_16_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_17_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_18_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_19_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_20_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_21_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_22_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_23_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_24_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dense_latency_0_0_0_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (47 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component relu_1 IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_16_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_17_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_18_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_19_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_20_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_21_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_22_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_23_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_24_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component conv_1d_latency_cl_0 IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (6 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component relu IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component reduce IS
    port (
        ap_ready : OUT STD_LOGIC;
        x_0_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
        x_1_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
        x_2_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
        x_3_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
        x_4_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
        x_5_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
        x_6_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
        x_7_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
        x_8_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
        x_9_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
        x_10_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
        x_11_V_read : IN STD_LOGIC_VECTOR (16 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component disambiguation_nedEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component disambiguation_nebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address5 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address6 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address7 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address8 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address9 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address10 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address11 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component disambiguation_necud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table3_U : component disambiguation_nebkb
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table3_address0,
        ce0 => exp_table3_ce0,
        q0 => exp_table3_q0,
        address1 => exp_table3_address1,
        ce1 => exp_table3_ce1,
        q1 => exp_table3_q1,
        address2 => exp_table3_address2,
        ce2 => exp_table3_ce2,
        q2 => exp_table3_q2,
        address3 => exp_table3_address3,
        ce3 => exp_table3_ce3,
        q3 => exp_table3_q3,
        address4 => exp_table3_address4,
        ce4 => exp_table3_ce4,
        q4 => exp_table3_q4,
        address5 => exp_table3_address5,
        ce5 => exp_table3_ce5,
        q5 => exp_table3_q5,
        address6 => exp_table3_address6,
        ce6 => exp_table3_ce6,
        q6 => exp_table3_q6,
        address7 => exp_table3_address7,
        ce7 => exp_table3_ce7,
        q7 => exp_table3_q7,
        address8 => exp_table3_address8,
        ce8 => exp_table3_ce8,
        q8 => exp_table3_q8,
        address9 => exp_table3_address9,
        ce9 => exp_table3_ce9,
        q9 => exp_table3_q9,
        address10 => exp_table3_address10,
        ce10 => exp_table3_ce10,
        q10 => exp_table3_q10,
        address11 => exp_table3_address11,
        ce11 => exp_table3_ce11,
        q11 => exp_table3_q11);

    invert_table4_U : component disambiguation_necud
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table4_address0,
        ce0 => invert_table4_ce0,
        q0 => invert_table4_q0);

    call_ret3_dense_latency_0_0_0_1_fu_360 : component dense_latency_0_0_0_1
    port map (
        ap_ready => call_ret3_dense_latency_0_0_0_1_fu_360_ap_ready,
        data_0_V_read => layer4_out_0_V_reg_1304,
        data_1_V_read => layer4_out_1_V_reg_1309,
        data_2_V_read => layer4_out_2_V_reg_1314,
        data_3_V_read => layer4_out_3_V_reg_1319,
        data_4_V_read => layer4_out_4_V_reg_1324,
        data_5_V_read => layer4_out_5_V_reg_1329,
        data_6_V_read => layer4_out_6_V_reg_1334,
        data_7_V_read => layer4_out_7_V_reg_1339,
        data_8_V_read => layer4_out_8_V_reg_1344,
        data_9_V_read => layer4_out_9_V_reg_1349,
        data_10_V_read => layer4_out_10_V_reg_1354,
        data_11_V_read => layer4_out_11_V_reg_1359,
        data_12_V_read => layer4_out_12_V_reg_1364,
        data_13_V_read => layer4_out_13_V_reg_1369,
        data_14_V_read => layer4_out_14_V_reg_1374,
        data_15_V_read => layer4_out_15_V_reg_1379,
        data_16_V_read => layer4_out_16_V_reg_1384,
        data_17_V_read => layer4_out_17_V_reg_1389,
        data_18_V_read => layer4_out_18_V_reg_1394,
        data_19_V_read => layer4_out_19_V_reg_1399,
        data_20_V_read => layer4_out_20_V_reg_1404,
        data_21_V_read => layer4_out_21_V_reg_1409,
        data_22_V_read => layer4_out_22_V_reg_1414,
        data_23_V_read => layer4_out_23_V_reg_1419,
        data_24_V_read => layer4_out_24_V_reg_1424,
        ap_return_0 => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_0,
        ap_return_1 => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_1,
        ap_return_2 => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_2,
        ap_return_3 => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_3,
        ap_return_4 => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_4,
        ap_return_5 => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_5,
        ap_return_6 => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_6,
        ap_return_7 => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_7,
        ap_return_8 => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_8,
        ap_return_9 => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_9,
        ap_return_10 => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_10,
        ap_return_11 => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_11);

    call_ret_dense_latency_0_0_0_s_fu_389 : component dense_latency_0_0_0_s
    port map (
        ap_ready => call_ret_dense_latency_0_0_0_s_fu_389_ap_ready,
        data_V_read => input_V_in_sig,
        ap_return_0 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_0,
        ap_return_1 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_1,
        ap_return_2 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_2,
        ap_return_3 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_3,
        ap_return_4 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_4,
        ap_return_5 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_5,
        ap_return_6 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_6,
        ap_return_7 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_7,
        ap_return_8 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_8,
        ap_return_9 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_9,
        ap_return_10 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_10,
        ap_return_11 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_11,
        ap_return_12 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_12,
        ap_return_13 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_13,
        ap_return_14 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_14,
        ap_return_15 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_15,
        ap_return_16 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_16,
        ap_return_17 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_17,
        ap_return_18 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_18,
        ap_return_19 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_19,
        ap_return_20 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_20,
        ap_return_21 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_21,
        ap_return_22 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_22,
        ap_return_23 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_23,
        ap_return_24 => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_24);

    call_ret2_relu_1_fu_395 : component relu_1
    port map (
        ap_ready => call_ret2_relu_1_fu_395_ap_ready,
        data_0_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_0,
        data_1_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_1,
        data_2_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_2,
        data_3_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_3,
        data_4_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_4,
        data_5_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_5,
        data_6_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_6,
        data_7_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_7,
        data_8_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_8,
        data_9_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_9,
        data_10_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_10,
        data_11_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_11,
        data_12_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_12,
        data_13_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_13,
        data_14_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_14,
        data_15_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_15,
        data_16_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_16,
        data_17_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_17,
        data_18_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_18,
        data_19_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_19,
        data_20_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_20,
        data_21_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_21,
        data_22_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_22,
        data_23_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_23,
        data_24_V_read => call_ret_dense_latency_0_0_0_s_fu_389_ap_return_24,
        ap_return_0 => call_ret2_relu_1_fu_395_ap_return_0,
        ap_return_1 => call_ret2_relu_1_fu_395_ap_return_1,
        ap_return_2 => call_ret2_relu_1_fu_395_ap_return_2,
        ap_return_3 => call_ret2_relu_1_fu_395_ap_return_3,
        ap_return_4 => call_ret2_relu_1_fu_395_ap_return_4,
        ap_return_5 => call_ret2_relu_1_fu_395_ap_return_5,
        ap_return_6 => call_ret2_relu_1_fu_395_ap_return_6,
        ap_return_7 => call_ret2_relu_1_fu_395_ap_return_7,
        ap_return_8 => call_ret2_relu_1_fu_395_ap_return_8,
        ap_return_9 => call_ret2_relu_1_fu_395_ap_return_9,
        ap_return_10 => call_ret2_relu_1_fu_395_ap_return_10,
        ap_return_11 => call_ret2_relu_1_fu_395_ap_return_11,
        ap_return_12 => call_ret2_relu_1_fu_395_ap_return_12,
        ap_return_13 => call_ret2_relu_1_fu_395_ap_return_13,
        ap_return_14 => call_ret2_relu_1_fu_395_ap_return_14,
        ap_return_15 => call_ret2_relu_1_fu_395_ap_return_15,
        ap_return_16 => call_ret2_relu_1_fu_395_ap_return_16,
        ap_return_17 => call_ret2_relu_1_fu_395_ap_return_17,
        ap_return_18 => call_ret2_relu_1_fu_395_ap_return_18,
        ap_return_19 => call_ret2_relu_1_fu_395_ap_return_19,
        ap_return_20 => call_ret2_relu_1_fu_395_ap_return_20,
        ap_return_21 => call_ret2_relu_1_fu_395_ap_return_21,
        ap_return_22 => call_ret2_relu_1_fu_395_ap_return_22,
        ap_return_23 => call_ret2_relu_1_fu_395_ap_return_23,
        ap_return_24 => call_ret2_relu_1_fu_395_ap_return_24);

    call_ret5_conv_1d_latency_cl_0_fu_424 : component conv_1d_latency_cl_0
    port map (
        ap_ready => call_ret5_conv_1d_latency_cl_0_fu_424_ap_ready,
        data_0_V_read => layer7_out_0_V_reg_1429,
        data_1_V_read => layer7_out_1_V_reg_1434,
        data_2_V_read => layer7_out_2_V_reg_1439,
        data_3_V_read => layer7_out_3_V_reg_1444,
        data_4_V_read => layer7_out_4_V_reg_1449,
        data_5_V_read => layer7_out_5_V_reg_1454,
        data_6_V_read => layer7_out_6_V_reg_1459,
        data_7_V_read => layer7_out_7_V_reg_1464,
        data_8_V_read => layer7_out_8_V_reg_1469,
        data_9_V_read => layer7_out_9_V_reg_1474,
        data_10_V_read => layer7_out_10_V_reg_1479,
        data_11_V_read => layer7_out_11_V_reg_1484,
        ap_return_0 => call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_0,
        ap_return_1 => call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_1,
        ap_return_2 => call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_2,
        ap_return_3 => call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_3,
        ap_return_4 => call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_4,
        ap_return_5 => call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_5,
        ap_return_6 => call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_6,
        ap_return_7 => call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_7,
        ap_return_8 => call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_8,
        ap_return_9 => call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_9,
        ap_return_10 => call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_10,
        ap_return_11 => call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_11);

    call_ret4_relu_fu_440 : component relu
    port map (
        ap_ready => call_ret4_relu_fu_440_ap_ready,
        data_0_V_read => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_0,
        data_1_V_read => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_1,
        data_2_V_read => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_2,
        data_3_V_read => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_3,
        data_4_V_read => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_4,
        data_5_V_read => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_5,
        data_6_V_read => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_6,
        data_7_V_read => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_7,
        data_8_V_read => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_8,
        data_9_V_read => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_9,
        data_10_V_read => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_10,
        data_11_V_read => call_ret3_dense_latency_0_0_0_1_fu_360_ap_return_11,
        ap_return_0 => call_ret4_relu_fu_440_ap_return_0,
        ap_return_1 => call_ret4_relu_fu_440_ap_return_1,
        ap_return_2 => call_ret4_relu_fu_440_ap_return_2,
        ap_return_3 => call_ret4_relu_fu_440_ap_return_3,
        ap_return_4 => call_ret4_relu_fu_440_ap_return_4,
        ap_return_5 => call_ret4_relu_fu_440_ap_return_5,
        ap_return_6 => call_ret4_relu_fu_440_ap_return_6,
        ap_return_7 => call_ret4_relu_fu_440_ap_return_7,
        ap_return_8 => call_ret4_relu_fu_440_ap_return_8,
        ap_return_9 => call_ret4_relu_fu_440_ap_return_9,
        ap_return_10 => call_ret4_relu_fu_440_ap_return_10,
        ap_return_11 => call_ret4_relu_fu_440_ap_return_11);

    exp_sum_V_reduce_fu_456 : component reduce
    port map (
        ap_ready => exp_sum_V_reduce_fu_456_ap_ready,
        x_0_V_read => exp_table3_q0,
        x_1_V_read => exp_table3_q1,
        x_2_V_read => exp_table3_q2,
        x_3_V_read => exp_table3_q3,
        x_4_V_read => exp_table3_q4,
        x_5_V_read => exp_table3_q5,
        x_6_V_read => exp_table3_q6,
        x_7_V_read => exp_table3_q7,
        x_8_V_read => exp_table3_q8,
        x_9_V_read => exp_table3_q9,
        x_10_V_read => exp_table3_q10,
        x_11_V_read => exp_table3_q11,
        ap_return => exp_sum_V_reduce_fu_456_ap_return);

    disambiguation_nedEe_U92 : component disambiguation_nedEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln1118_fu_1220_p0,
        din1 => mul_ln1118_fu_1220_p1,
        dout => mul_ln1118_fu_1220_p2);

    disambiguation_nedEe_U93 : component disambiguation_nedEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln1118_1_fu_1227_p0,
        din1 => mul_ln1118_1_fu_1227_p1,
        dout => mul_ln1118_1_fu_1227_p2);

    disambiguation_nedEe_U94 : component disambiguation_nedEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln1118_2_fu_1234_p0,
        din1 => mul_ln1118_2_fu_1234_p1,
        dout => mul_ln1118_2_fu_1234_p2);

    disambiguation_nedEe_U95 : component disambiguation_nedEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln1118_3_fu_1241_p0,
        din1 => mul_ln1118_3_fu_1241_p1,
        dout => mul_ln1118_3_fu_1241_p2);

    disambiguation_nedEe_U96 : component disambiguation_nedEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln1118_4_fu_1248_p0,
        din1 => mul_ln1118_4_fu_1248_p1,
        dout => mul_ln1118_4_fu_1248_p2);

    disambiguation_nedEe_U97 : component disambiguation_nedEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln1118_5_fu_1255_p0,
        din1 => mul_ln1118_5_fu_1255_p1,
        dout => mul_ln1118_5_fu_1255_p2);

    disambiguation_nedEe_U98 : component disambiguation_nedEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln1118_6_fu_1262_p0,
        din1 => mul_ln1118_6_fu_1262_p1,
        dout => mul_ln1118_6_fu_1262_p2);

    disambiguation_nedEe_U99 : component disambiguation_nedEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln1118_7_fu_1269_p0,
        din1 => mul_ln1118_7_fu_1269_p1,
        dout => mul_ln1118_7_fu_1269_p2);

    disambiguation_nedEe_U100 : component disambiguation_nedEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln1118_8_fu_1276_p0,
        din1 => mul_ln1118_8_fu_1276_p1,
        dout => mul_ln1118_8_fu_1276_p2);

    disambiguation_nedEe_U101 : component disambiguation_nedEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln1118_9_fu_1283_p0,
        din1 => mul_ln1118_9_fu_1283_p1,
        dout => mul_ln1118_9_fu_1283_p2);

    disambiguation_nedEe_U102 : component disambiguation_nedEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln1118_10_fu_1290_p0,
        din1 => mul_ln1118_10_fu_1290_p1,
        dout => mul_ln1118_10_fu_1290_p2);

    disambiguation_nedEe_U103 : component disambiguation_nedEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 21)
    port map (
        din0 => mul_ln1118_11_fu_1297_p0,
        din1 => mul_ln1118_11_fu_1297_p1,
        dout => mul_ln1118_11_fu_1297_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    input_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    input_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (input_V_ap_vld = ap_const_logic_1))) then 
                    input_V_ap_vld_preg <= input_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    input_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                input_V_preg <= ap_const_lv48_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (input_V_ap_vld = ap_const_logic_1))) then 
                    input_V_preg <= input_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                exp_res_0_V_reg_1549 <= exp_table3_q0;
                exp_res_10_V_reg_1599 <= exp_table3_q10;
                exp_res_11_V_reg_1604 <= exp_table3_q11;
                exp_res_1_V_reg_1554 <= exp_table3_q1;
                exp_res_2_V_reg_1559 <= exp_table3_q2;
                exp_res_3_V_reg_1564 <= exp_table3_q3;
                exp_res_4_V_reg_1569 <= exp_table3_q4;
                exp_res_5_V_reg_1574 <= exp_table3_q5;
                exp_res_6_V_reg_1579 <= exp_table3_q6;
                exp_res_7_V_reg_1584 <= exp_table3_q7;
                exp_res_8_V_reg_1589 <= exp_table3_q8;
                exp_res_9_V_reg_1594 <= exp_table3_q9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                layer4_out_0_V_reg_1304 <= call_ret2_relu_1_fu_395_ap_return_0;
                layer4_out_10_V_reg_1354 <= call_ret2_relu_1_fu_395_ap_return_10;
                layer4_out_11_V_reg_1359 <= call_ret2_relu_1_fu_395_ap_return_11;
                layer4_out_12_V_reg_1364 <= call_ret2_relu_1_fu_395_ap_return_12;
                layer4_out_13_V_reg_1369 <= call_ret2_relu_1_fu_395_ap_return_13;
                layer4_out_14_V_reg_1374 <= call_ret2_relu_1_fu_395_ap_return_14;
                layer4_out_15_V_reg_1379 <= call_ret2_relu_1_fu_395_ap_return_15;
                layer4_out_16_V_reg_1384 <= call_ret2_relu_1_fu_395_ap_return_16;
                layer4_out_17_V_reg_1389 <= call_ret2_relu_1_fu_395_ap_return_17;
                layer4_out_18_V_reg_1394 <= call_ret2_relu_1_fu_395_ap_return_18;
                layer4_out_19_V_reg_1399 <= call_ret2_relu_1_fu_395_ap_return_19;
                layer4_out_1_V_reg_1309 <= call_ret2_relu_1_fu_395_ap_return_1;
                layer4_out_20_V_reg_1404 <= call_ret2_relu_1_fu_395_ap_return_20;
                layer4_out_21_V_reg_1409 <= call_ret2_relu_1_fu_395_ap_return_21;
                layer4_out_22_V_reg_1414 <= call_ret2_relu_1_fu_395_ap_return_22;
                layer4_out_23_V_reg_1419 <= call_ret2_relu_1_fu_395_ap_return_23;
                layer4_out_24_V_reg_1424 <= call_ret2_relu_1_fu_395_ap_return_24;
                layer4_out_2_V_reg_1314 <= call_ret2_relu_1_fu_395_ap_return_2;
                layer4_out_3_V_reg_1319 <= call_ret2_relu_1_fu_395_ap_return_3;
                layer4_out_4_V_reg_1324 <= call_ret2_relu_1_fu_395_ap_return_4;
                layer4_out_5_V_reg_1329 <= call_ret2_relu_1_fu_395_ap_return_5;
                layer4_out_6_V_reg_1334 <= call_ret2_relu_1_fu_395_ap_return_6;
                layer4_out_7_V_reg_1339 <= call_ret2_relu_1_fu_395_ap_return_7;
                layer4_out_8_V_reg_1344 <= call_ret2_relu_1_fu_395_ap_return_8;
                layer4_out_9_V_reg_1349 <= call_ret2_relu_1_fu_395_ap_return_9;
                layer7_out_0_V_reg_1429 <= call_ret4_relu_fu_440_ap_return_0;
                layer7_out_10_V_reg_1479 <= call_ret4_relu_fu_440_ap_return_10;
                layer7_out_11_V_reg_1484 <= call_ret4_relu_fu_440_ap_return_11;
                layer7_out_1_V_reg_1434 <= call_ret4_relu_fu_440_ap_return_1;
                layer7_out_2_V_reg_1439 <= call_ret4_relu_fu_440_ap_return_2;
                layer7_out_3_V_reg_1444 <= call_ret4_relu_fu_440_ap_return_3;
                layer7_out_4_V_reg_1449 <= call_ret4_relu_fu_440_ap_return_4;
                layer7_out_5_V_reg_1454 <= call_ret4_relu_fu_440_ap_return_5;
                layer7_out_6_V_reg_1459 <= call_ret4_relu_fu_440_ap_return_6;
                layer7_out_7_V_reg_1464 <= call_ret4_relu_fu_440_ap_return_7;
                layer7_out_8_V_reg_1469 <= call_ret4_relu_fu_440_ap_return_8;
                layer7_out_9_V_reg_1474 <= call_ret4_relu_fu_440_ap_return_9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, input_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, input_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, input_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, input_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (input_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    const_size_in_1 <= ap_const_lv16_8;

    const_size_in_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            const_size_in_1_ap_vld <= ap_const_logic_1;
        else 
            const_size_in_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    const_size_out_1 <= ap_const_lv16_C;

    const_size_out_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            const_size_out_1_ap_vld <= ap_const_logic_1;
        else 
            const_size_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exp_table3_address0 <= zext_ln250_fu_875_p1(10 - 1 downto 0);
    exp_table3_address1 <= zext_ln250_1_fu_890_p1(10 - 1 downto 0);
    exp_table3_address10 <= zext_ln250_10_fu_1025_p1(10 - 1 downto 0);
    exp_table3_address11 <= zext_ln250_11_fu_1040_p1(10 - 1 downto 0);
    exp_table3_address2 <= zext_ln250_2_fu_905_p1(10 - 1 downto 0);
    exp_table3_address3 <= zext_ln250_3_fu_920_p1(10 - 1 downto 0);
    exp_table3_address4 <= zext_ln250_4_fu_935_p1(10 - 1 downto 0);
    exp_table3_address5 <= zext_ln250_5_fu_950_p1(10 - 1 downto 0);
    exp_table3_address6 <= zext_ln250_6_fu_965_p1(10 - 1 downto 0);
    exp_table3_address7 <= zext_ln250_7_fu_980_p1(10 - 1 downto 0);
    exp_table3_address8 <= zext_ln250_8_fu_995_p1(10 - 1 downto 0);
    exp_table3_address9 <= zext_ln250_9_fu_1010_p1(10 - 1 downto 0);

    exp_table3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table3_ce0 <= ap_const_logic_1;
        else 
            exp_table3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table3_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table3_ce1 <= ap_const_logic_1;
        else 
            exp_table3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table3_ce10_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table3_ce10 <= ap_const_logic_1;
        else 
            exp_table3_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table3_ce11_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table3_ce11 <= ap_const_logic_1;
        else 
            exp_table3_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table3_ce2_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table3_ce2 <= ap_const_logic_1;
        else 
            exp_table3_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table3_ce3_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table3_ce3 <= ap_const_logic_1;
        else 
            exp_table3_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table3_ce4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table3_ce4 <= ap_const_logic_1;
        else 
            exp_table3_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table3_ce5_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table3_ce5 <= ap_const_logic_1;
        else 
            exp_table3_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table3_ce6_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table3_ce6 <= ap_const_logic_1;
        else 
            exp_table3_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table3_ce7_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table3_ce7 <= ap_const_logic_1;
        else 
            exp_table3_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table3_ce8_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table3_ce8 <= ap_const_logic_1;
        else 
            exp_table3_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table3_ce9_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table3_ce9 <= ap_const_logic_1;
        else 
            exp_table3_ce9 <= ap_const_logic_0;
        end if; 
    end process;


    input_V_ap_vld_in_sig_assign_proc : process(input_V_ap_vld, input_V_ap_vld_preg)
    begin
        if ((input_V_ap_vld = ap_const_logic_1)) then 
            input_V_ap_vld_in_sig <= input_V_ap_vld;
        else 
            input_V_ap_vld_in_sig <= input_V_ap_vld_preg;
        end if; 
    end process;


    input_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, input_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            input_V_blk_n <= input_V_ap_vld;
        else 
            input_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_V_in_sig_assign_proc : process(input_V_ap_vld, input_V, input_V_preg)
    begin
        if ((input_V_ap_vld = ap_const_logic_1)) then 
            input_V_in_sig <= input_V;
        else 
            input_V_in_sig <= input_V_preg;
        end if; 
    end process;

    invert_table4_address0 <= zext_ln258_fu_1055_p1(10 - 1 downto 0);

    invert_table4_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            invert_table4_ce0 <= ap_const_logic_1;
        else 
            invert_table4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer11_out_0_V <= mul_ln1118_fu_1220_p2(20 downto 11);

    layer11_out_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer11_out_0_V_ap_vld <= ap_const_logic_1;
        else 
            layer11_out_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer11_out_10_V <= mul_ln1118_10_fu_1290_p2(20 downto 11);

    layer11_out_10_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer11_out_10_V_ap_vld <= ap_const_logic_1;
        else 
            layer11_out_10_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer11_out_11_V <= mul_ln1118_11_fu_1297_p2(20 downto 11);

    layer11_out_11_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer11_out_11_V_ap_vld <= ap_const_logic_1;
        else 
            layer11_out_11_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer11_out_1_V <= mul_ln1118_1_fu_1227_p2(20 downto 11);

    layer11_out_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer11_out_1_V_ap_vld <= ap_const_logic_1;
        else 
            layer11_out_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer11_out_2_V <= mul_ln1118_2_fu_1234_p2(20 downto 11);

    layer11_out_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer11_out_2_V_ap_vld <= ap_const_logic_1;
        else 
            layer11_out_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer11_out_3_V <= mul_ln1118_3_fu_1241_p2(20 downto 11);

    layer11_out_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer11_out_3_V_ap_vld <= ap_const_logic_1;
        else 
            layer11_out_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer11_out_4_V <= mul_ln1118_4_fu_1248_p2(20 downto 11);

    layer11_out_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer11_out_4_V_ap_vld <= ap_const_logic_1;
        else 
            layer11_out_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer11_out_5_V <= mul_ln1118_5_fu_1255_p2(20 downto 11);

    layer11_out_5_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer11_out_5_V_ap_vld <= ap_const_logic_1;
        else 
            layer11_out_5_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer11_out_6_V <= mul_ln1118_6_fu_1262_p2(20 downto 11);

    layer11_out_6_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer11_out_6_V_ap_vld <= ap_const_logic_1;
        else 
            layer11_out_6_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer11_out_7_V <= mul_ln1118_7_fu_1269_p2(20 downto 11);

    layer11_out_7_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer11_out_7_V_ap_vld <= ap_const_logic_1;
        else 
            layer11_out_7_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer11_out_8_V <= mul_ln1118_8_fu_1276_p2(20 downto 11);

    layer11_out_8_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer11_out_8_V_ap_vld <= ap_const_logic_1;
        else 
            layer11_out_8_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer11_out_9_V <= mul_ln1118_9_fu_1283_p2(20 downto 11);

    layer11_out_9_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer11_out_9_V_ap_vld <= ap_const_logic_1;
        else 
            layer11_out_9_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_10_fu_1290_p0 <= sext_ln1116_fu_1060_p1(18 - 1 downto 0);
    mul_ln1118_10_fu_1290_p1 <= mul_ln1118_10_fu_1290_p10(17 - 1 downto 0);
    mul_ln1118_10_fu_1290_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_10_V_reg_1599),21));
    mul_ln1118_11_fu_1297_p0 <= sext_ln1116_fu_1060_p1(18 - 1 downto 0);
    mul_ln1118_11_fu_1297_p1 <= mul_ln1118_11_fu_1297_p10(17 - 1 downto 0);
    mul_ln1118_11_fu_1297_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_11_V_reg_1604),21));
    mul_ln1118_1_fu_1227_p0 <= sext_ln1116_fu_1060_p1(18 - 1 downto 0);
    mul_ln1118_1_fu_1227_p1 <= mul_ln1118_1_fu_1227_p10(17 - 1 downto 0);
    mul_ln1118_1_fu_1227_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_1554),21));
    mul_ln1118_2_fu_1234_p0 <= sext_ln1116_fu_1060_p1(18 - 1 downto 0);
    mul_ln1118_2_fu_1234_p1 <= mul_ln1118_2_fu_1234_p10(17 - 1 downto 0);
    mul_ln1118_2_fu_1234_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_1559),21));
    mul_ln1118_3_fu_1241_p0 <= sext_ln1116_fu_1060_p1(18 - 1 downto 0);
    mul_ln1118_3_fu_1241_p1 <= mul_ln1118_3_fu_1241_p10(17 - 1 downto 0);
    mul_ln1118_3_fu_1241_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_V_reg_1564),21));
    mul_ln1118_4_fu_1248_p0 <= sext_ln1116_fu_1060_p1(18 - 1 downto 0);
    mul_ln1118_4_fu_1248_p1 <= mul_ln1118_4_fu_1248_p10(17 - 1 downto 0);
    mul_ln1118_4_fu_1248_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_V_reg_1569),21));
    mul_ln1118_5_fu_1255_p0 <= sext_ln1116_fu_1060_p1(18 - 1 downto 0);
    mul_ln1118_5_fu_1255_p1 <= mul_ln1118_5_fu_1255_p10(17 - 1 downto 0);
    mul_ln1118_5_fu_1255_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_5_V_reg_1574),21));
    mul_ln1118_6_fu_1262_p0 <= sext_ln1116_fu_1060_p1(18 - 1 downto 0);
    mul_ln1118_6_fu_1262_p1 <= mul_ln1118_6_fu_1262_p10(17 - 1 downto 0);
    mul_ln1118_6_fu_1262_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_6_V_reg_1579),21));
    mul_ln1118_7_fu_1269_p0 <= sext_ln1116_fu_1060_p1(18 - 1 downto 0);
    mul_ln1118_7_fu_1269_p1 <= mul_ln1118_7_fu_1269_p10(17 - 1 downto 0);
    mul_ln1118_7_fu_1269_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_7_V_reg_1584),21));
    mul_ln1118_8_fu_1276_p0 <= sext_ln1116_fu_1060_p1(18 - 1 downto 0);
    mul_ln1118_8_fu_1276_p1 <= mul_ln1118_8_fu_1276_p10(17 - 1 downto 0);
    mul_ln1118_8_fu_1276_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_8_V_reg_1589),21));
    mul_ln1118_9_fu_1283_p0 <= sext_ln1116_fu_1060_p1(18 - 1 downto 0);
    mul_ln1118_9_fu_1283_p1 <= mul_ln1118_9_fu_1283_p10(17 - 1 downto 0);
    mul_ln1118_9_fu_1283_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_9_V_reg_1594),21));
    mul_ln1118_fu_1220_p0 <= sext_ln1116_fu_1060_p1(18 - 1 downto 0);
    mul_ln1118_fu_1220_p1 <= mul_ln1118_fu_1220_p10(17 - 1 downto 0);
    mul_ln1118_fu_1220_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_1549),21));
        sext_ln1116_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table4_q0),21));

    y_V_10_fu_1015_p4 <= call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_10(15 downto 6);
    y_V_11_fu_1030_p4 <= call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_11(15 downto 6);
    y_V_12_fu_1045_p4 <= exp_sum_V_reduce_fu_456_ap_return(17 downto 8);
    y_V_1_fu_880_p4 <= call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_1(15 downto 6);
    y_V_2_fu_895_p4 <= call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_2(15 downto 6);
    y_V_3_fu_910_p4 <= call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_3(15 downto 6);
    y_V_4_fu_925_p4 <= call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_4(15 downto 6);
    y_V_5_fu_940_p4 <= call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_5(15 downto 6);
    y_V_6_fu_955_p4 <= call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_6(15 downto 6);
    y_V_7_fu_970_p4 <= call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_7(15 downto 6);
    y_V_8_fu_985_p4 <= call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_8(15 downto 6);
    y_V_9_fu_1000_p4 <= call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_9(15 downto 6);
    y_V_fu_865_p4 <= call_ret5_conv_1d_latency_cl_0_fu_424_ap_return_0(15 downto 6);
    zext_ln250_10_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_10_fu_1015_p4),64));
    zext_ln250_11_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_11_fu_1030_p4),64));
    zext_ln250_1_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_fu_880_p4),64));
    zext_ln250_2_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_fu_895_p4),64));
    zext_ln250_3_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_fu_910_p4),64));
    zext_ln250_4_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_fu_925_p4),64));
    zext_ln250_5_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_5_fu_940_p4),64));
    zext_ln250_6_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_6_fu_955_p4),64));
    zext_ln250_7_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_7_fu_970_p4),64));
    zext_ln250_8_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_8_fu_985_p4),64));
    zext_ln250_9_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_9_fu_1000_p4),64));
    zext_ln250_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_fu_865_p4),64));
    zext_ln258_fu_1055_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_12_fu_1045_p4),64));
end behav;
